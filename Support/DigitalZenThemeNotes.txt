Development Plan
	Infrastructure
	Core Functionality
	Merging of other themes
	Testing, Polishing, Validation of requirements
	Enhancements, Optimizations
	Publish	On Github, WordPress

	infrastructure
		ignore file.
		standard license
		blank screen shot
		README.md
		.editorconfig
		workspace file
		npm & composer
		phpdoc
		phpunit
		build tools
			grunt
			node modules
			minify
			scss
		pipelines
		sniffs and warnings, theme checkers, etc
		unit tests
	_s theme
	style.css
	pot files
	boilerplate
	assets
	bootstrap
	other packages?
	merge of existing themes
		child themes
	optimizations
		seo
		social media
	customizations
		admin options
	google analytics
	Merge variant themes
		Dzw-Bootstrap-Child
		Psynary
		Inferret
		Start from _s?	I think too much work in the given timeframe
		DigitalZen	Just too much in infancy
		Dzw-Custom
	funding
	file headers
Notes
	CustomLogo
		Install
			The custom logo support should be added first to your theme using add_theme_support(), and then be called in your theme using the_custom_logo()

			To enable the use of a custom logo in your theme, add the following to your functions.php file:
				add_theme_support( 'custom-logo' );
				function themename_custom_logo_setup() {
				 $defaults = array(
				 'height'      => 100,
				 'width'       => 400,
				 'flex-height' => true,
				 'flex-width'  => true,
				 'header-text' => array( 'site-title', 'site-description' ),
				 );
				 add_theme_support( 'custom-logo', $defaults );
				}
				add_action( 'after_setup_theme', 'themename_custom_logo_setup' );
		Display
		$custom_logo_id = get_theme_mod( 'custom_logo' );
		$image = wp_get_attachment_image_src( $custom_logo_id , 'full' );
		echo $image[0];

		if ( function_exists( 'the_custom_logo' ) ) {
		 the_custom_logo();
		}
	Language Activation
		#qtransLangSw?AL&title=none&flags=all&names=hidden&current=hidden
		#qtransLangSw?title=none&names=hidden&current=hidden
		Activated qTranslate-Xt plugin	**Manual step
		Set plugin settings	**Manual step
			languages
			permalinks
	Commands
		composer lint:wpcs
		composer lint:php
		composer make-pot
		wp i18n make-pot . languages/_s.pot
		npm run compile:css
		node-sass assets/css/sass/ -o assets/css && stylelint '*.css' --fix || true && stylelint '*.css' --fix

		npm run compile:rtl : generates an RTL stylesheet.
		npm run watch : watches all SASS files and recompiles them to css when they change.
		npm run lint:scss : checks all SASS files against CSS Coding Standards.
		npm run lint:js : checks all JavaScript files against JavaScript Coding Standards.
		npm run bundle : generates a .zip archive for distribution, excluding development and system files.
	Coding Styles
		npm install @wordpress/stylelint-config
		npm i stylelint-config-wordpress
		npm remove @wordpress/stylelint-config
		composer require --dev dealerdirect/phpcodesniffer-composer-installer
	Additional Code
			modified:   assets/css/main.css
			modified:   ruleset.xml

			// prevent reformatting of the text
			remove_filter( 'the_content', 'wpautop' );
			remove_filter( 'the_excerpt', 'wpautop' );

			add_theme_support('menus' );

			add_action('init', 'disable_wp_emojicons' );

			remove_action('wp_head', 'wp_generator');

			add_action('pre_get_posts', 'post_queries' );

			// Remove the Link header for the WP REST API
			// [link] => <http://www.example.com/wp-json/>; rel="https://api.w.org/"
			remove_action('template_redirect', 'rest_output_link_header', 11, 0);
			add_action('after_setup_theme', 'remove_json_api');

			// remove contact form's unnessary css from all pages
			add_action('wp_enqueue_scripts', 'deregister_contactform_script',
				PHP_INT_MAX);
			add_action('after_setup_theme', 'deregister_contactform_script');

			add_action('wp_enqueue_scripts', 'deregister_embed_script');

			add_filter('show_admin_bar', '__return_false');

				add_action('init', 'disable_wp_emojicons');

				// remove Open Sans font
				add_action('wp_enqueue_scripts', 'deregister_styles', 100);

			function clean_yoast()
			{
				// Sets the canonical link to the page url
				add_filter('wpseo_canonical', 'wpseo_canonical');

				// Set the meta description for the main page
				add_action('wp', 'home_check');

				// disable yoast next and previous links (broken)
				add_filter('wpseo_next_rel_link', 'wpseo_next_rel_link');
				add_filter('wpseo_prev_rel_link', 'wpseo_prev_rel_link');
			}

			function comment_debug()
			{
				$item = '';
				$post_id = '';

				if (!empty($_SERVER))
				{
					if (array_key_exists('REQUEST_URI', $_SERVER))
					{
						$item = $_SERVER['REQUEST_URI'];
						$item  = trim($item, '/');
					}
				}

				if (!empty($item))
				{
					$post = get_page_by_path($item);

					if (!empty($post))
					{
						$post_id = $post->ID;
					}
				}

				echo "\r\n<!--*****DEBUG: item: $item :: post: $post_id*****-->\r\n";
			}

			function deregister_contactform_script()
			{
				$current_uri = add_query_arg( NULL, NULL );
				$found = strpos($current_uri, "/contact-us/");

				if (false === $found)
				{
					remove_action('wp_enqueue_scripts', 'cntctfrm_wp_head');
				}
			}

			function deregister_embed_script()
			{
				wp_deregister_script('wp-embed');
			}
	Text Domains
		$cl_text_domain = PHPCSHelper::get_config_data( 'text_domain' );
		if ($cl_text_domain !== null)
		{
			$cl_text_domain = trim( PHPCSHelper::get_config_data( 'text_domain' ) );
		}

		$cl_prefixes = PHPCSHelper::get_config_data( 'prefixes' );
		if ($cl_prefixes !== null)
		{
			$cl_prefixes = trim( PHPCSHelper::get_config_data( 'text_domain' ) );
		}
Resources
	Please visit the following links to learn more about translating WordPress themes:
		https://make.wordpress.org/polyglots/teams/
		https://developer.wordpress.org/themes/functionality/localization/
		https://developer.wordpress.org/reference/functions/load_theme_textdomain/
		https://github.com/Automattic/_s

		https://themetest.wordpress.com/

		https://developer.wordpress.com/themes/
		https://make.wordpress.org/themes/handbook/review/required/
		https://make.wordpress.org/themes/2013/11/10/guidelines-shouldnt-fail-a-theme/
		https://make.wordpress.org/core/handbook/best-practices/coding-standards/

		https://developer.wordpress.org/themes/getting-started/
		https://developer.wordpress.org/themes/getting-started/theme-development-examples/
		http://underscores.me/
		https://developer.wordpress.com/themes/
		https://make.wordpress.org/themes/handbook/review/required/
		https://codex.wordpress.org/Theme_Unit_Test
		https://www.taniarascia.com/developing-a-wordpress-theme-from-scratch/
		https://my.studiopress.com/themes/genesis/
	Child Themes
		https://www.smashingmagazine.com/2016/01/create-customize-wordpress-child-theme/
		https://developer.wordpress.org/themes/advanced-topics/child-themes/
	wordpress theme unit tests
		https://poweredbycoffee.co.uk/unit-testing-with-wordpress/
		https://www.smashingmagazine.com/2017/12/automated-testing-wordpress-plugins-phpunit/
		https://code.tutsplus.com/articles/the-beginners-guide-to-unit-testing-building-testable-themes--wp-26007
		https://github.com/tommcfarlin/Basic-Theme/blob/master/tests/test_basic_theme.php
		https://wordpress.stackexchange.com/questions/170510/how-exactly-does-unit-testing-work-for-themes
		https://codesymphony.co/writing-wordpress-plugin-unit-tests/
		https://core.trac.wordpress.org/browser/tests/trunk
		https://wptest.io/
		https://infinum.com/handbook/wordpress/automated-testing-in-wordpress/basic-tests-using-phpunit/core-tests
		https://developer.wordpress.org/themes/advanced-topics/theme-testing/
		Testing
			https://developer.wordpress.org/themes/advanced-topics/theme-testing/
			https://github.com/WPTT/theme-test-data
			https://github.com/WPTT/theme-sniffer
			https://github.com/WPTT/WPThemeReview
			https://infinum.com/handbook/wordpress/automated-testing-in-wordpress/codeception
			https://codex.wordpress.org/Theme_Unit_Test
